AWSTemplateFormatVersion: '2010-09-09'
Description: Automated deployment of a two-tier AWS infrastructure consisting of a web server (EC2 instance) and a SQL database (RDS) for WordPress.

Resources:
  WordpressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WordpressVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WordpressVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WordpressVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-central-1a
      MapPublicIpOnLaunch: true

  PublicSubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WordpressVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-central-1b

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WordpressVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-central-1c

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access to the web server
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable MySQL access to the database server
      VpcId: !Ref WordpressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebServerRole

  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2DescribeRDSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                Resource: '*'

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-098c93bd9d119c051
      KeyName: jsp-key-pair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref WebServerSecurityGroup
          SubnetId: !Ref PublicSubnet1
      IamInstanceProfile: !Ref WebServerInstanceProfile
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            
            dnf update -y
            dnf install -y httpd php php-mysqlnd mariadb105
            systemctl start httpd
            systemctl enable httpd
            cd /var/www/html
            wget https://wordpress.org/latest.tar.gz
            tar -xzvf latest.tar.gz
            cp -r wordpress/* .
            rm -rf wordpress latest.tar.gz
            chown -R apache:apache /var/www/html
            systemctl restart httpd

            # Copy wp-config-sample.php to wp-config.php
            cp wp-config-sample.php wp-config.php

            # Install AWS CLI (assuming it's not installed already)
            yum install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # Wait for the RDS instance to become available
            while ! aws rds describe-db-instances --db-instance-identifier wordpress-db-instance --query 'DBInstances[0].DBInstanceStatus' --output text | grep -q available; do
              echo "Waiting for RDS instance to become available..."
              sleep 30
            done
            echo "RDS instance is available. Proceeding with configuration."
            
            # Update wp-config.php with RDS database details
            sed -i "s/'database_name_here'/'wordpressdb'/g" wp-config.php
            sed -i "s/'username_here'/'admin'/g" wp-config.php
            sed -i "s/'password_here'/'password'/g" wp-config.php
            sed -i "s/'localhost'/'${DB_HOST}'/g" wp-config.php
          - DB_HOST: !GetAtt DatabaseInstance.Endpoint.Address

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: wordpressdb
      DBInstanceIdentifier: wordpress-db-instance
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: '8.0.35'
      AllocatedStorage: 20
      MasterUsername: admin
      MasterUserPassword: password
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
      - !Ref DatabaseSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
